fn print_array_ptr(array: a) { // array with arguments
    printf("Array: %p\n", a);
}

fn test_array_func() -> array { // create array and return it
    array<num> test = [ 3, 4 ];

    return test;
}

fn main() -> num {
    array<num> a1 = [ 1, 2 ];
    array: a2 = test_array_func(); // we dont know the type, so we dont declare it, just call the function
    array<array> array_2d = [ a1, a2 ]; // multidimensional arrays are a thing, but its not a great syntax

    num: row = 0;

    while row < size(array_2d) {
        array: row_array = at(array_2d, row, self_t);
        num: col = 0;

        while col < size(row_array) {
            print_array_ptr(at(row_array, col, num_t));

            col = col + 1;
        }

        print("\n");

        row = row + 1;
    }

    row = 0;

    while row < size(array_2d) {
        array: row_array = at(array_2d, row, self_t);
        num: col = 0;

        while col < size(row_array) {
            print("%ld ", at(row_array, col, num_t));
            
            col = col + 1;
        }

        print("\n");

        row = row + 1;
    }
    
    return 0;
}