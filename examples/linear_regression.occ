fn mean(array: data) rnum {
    rnum: sum = 0.0;

    for rnum: value in data {
        sum = sum + value;
    }

    return sum / data.size();
}

fn calc_slope(array: x, array: y) rnum {
    rnum: sum_xy = 0.0;
    rnum: sum_x = 0.0;
    rnum: sum_y = 0.0;
    rnum: sum_x_sq = 0.0;

    num: size = x.size();
    num: i = 0;

    while i < size {
        sum_xy = sum_xy + (x.get(i, rnum_t) * y.get(i, rnum_t));
        sum_x = sum_x + x.get(i, rnum_t);
        sum_y = sum_y + y.get(i, rnum_t);
        sum_x_sq = sum_x_sq + (x.get(i, rnum_t) * x.get(i, rnum_t));

        i++;
    }

    rnum: numerator = (size * sum_xy) - (sum_x * sum_y);
    rnum: denominator = (size * sum_x_sq) - (sum_x * sum_x);

    return numerator / denominator;
}

fn calc_intercept(array: x, array: y, rnum: slope) rnum {
    rnum: x_mean = mean(x);
    rnum: y_mean = mean(y);

    return y_mean - slope * x_mean;
}

fn linear_regression(array: x, array: y, rnum ptr: slope, rnum ptr: intercept) {
    deref slope = calc_slope(x, y);
    deref intercept = calc_intercept(x, y, deref slope);
}

fn main() {
    array: x = [0.9, 2.7, 3.3, 4.4, 5.1];
    array: y = [2.72, 3.8, 4.141, 5.42, 6.123];
    
    rnum: slope = 0.0;
    rnum: intercept = 0.0;

    linear_regression(x, y, &slope, &intercept);

    print("Regression Line Equation: y = %.2fx + %.2f\n", slope, intercept);
}
